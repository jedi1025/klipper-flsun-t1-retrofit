#FLSUN T1
####################################################################################################
#motor part
####################################################################################################

# Driver0
[stepper_a]
step_pin: PC14
dir_pin: PC13
enable_pin: !PE6
microsteps: 16
rotation_distance: 60
endstop_pin: PC15
position_endstop: 332
homing_speed: 40
arm_length = 335

# Driver1
[stepper_b]
step_pin: PE5
dir_pin: PE4
enable_pin: !PE3
microsteps: 16
rotation_distance: 40
endstop_pin: PF0
position_endstop: 332
homing_speed: 50
arm_length = 335

# Driver2
[stepper_c]
step_pin: PE2
dir_pin: PE1
enable_pin: !PE0
microsteps: 16
rotation_distance: 8
endstop_pin: PF1
position_endstop: 332
arm_length = 335

# Driver3
# The Octopus only has 4 heater outputs which leaves an extra stepper
# This can be used for a second Z stepper, dual_carriage, extruder co-stepper,
# or other accesory such as an MMU
#[stepper_]
#step_pin: PB9
#dir_pin: PB8
#enable_pin: !PB7
#endstop_pin: PF2
#...

# Driver4
[extruder]
step_pin: PG9
dir_pin: PG10
enable_pin: !PG13
microsteps: 16
rotation_distance: 4.5
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PF6 # HE0
sensor_pin:  PB1 # T0
sensor_type: Generic 3950
max_extrude_cross_section: 50 # default 0.640
max_extrude_only_distance: 500
pressure_advance: 0.025 
#pressure_advance: 0.041
control: pid
pid_Kp: 22.2
pid_Ki: 1.08
pid_Kd: 114
min_temp: 0
max_temp: 350

# Driver5
#[extruder1]
#step_pin: PG11
#dir_pin: PD7
#enable_pin: !PG12
#heater_pin: PF7 # HE1
#sensor_pin: PC5 # T1

##sensor_type:MAX31865
##sensor_pin: PA8
##spi_bus: spi3a
##rtd_nominal_r: 100
##rtd_reference_r: 430
##rtd_num_of_wires: 2
#...

#[filament_switch_sensor material_1]
#switch_pin: PF4

# Driver6
#[extruder2]
#step_pin: PB4
#dir_pin: PB3
#enable_pin: !PB5
#heater_pin: PF9 # HE2
#sensor_pin: PC4 # T2
#...

# Driver7
#[extruder3]
#step_pin: PG15
#dir_pin: PB6
#enable_pin: !PG14
#heater_pin: PF8 # HE3
#sensor_pin: PA7 # T3
#...

####################################################################################################
#mcu ,pin
####################################################################################################

[mcu]
serial: /dev/serial/by-id/usb-Klipper_Klipper_firmware_12345-if00
# CAN bus is also available on this board

[exclude_object]

[heater_bed]
heater_pin: PF5
sensor_pin: PB0 # TB
sensor_type: Generic 3950
control: pid
pid_Kp: 18.240
pid_Ki: 0.558
pid_Kd: 149.109
min_temp: 0
max_temp: 130

[heater_fan heat_sink_fan] 
pin: PA0
heater_temp: 50.0

#[heater_fan fan1]
#pin: PA1

#[heater_fan fan2]
#pin: PA2

[output_pin BOXFAN_pin]
pin: PA3
pwm: False
value: 0

#[fan_generic fan4]
#pin: PA4

#[fan_generic fan5]
#pin: PA5

#[fan_generic fan6]
#pin: PA6
#tachometer_pin: PC1

[fan]
pin: PA6
tachometer_pin: PC1

#[controller_fan fan5]
#pin: PD15

[filament_switch_sensor filament_sensor]
pause_on_runout: False
runout_gcode: 
    M117 Filament Runout Detected!
    PAUSE
switch_pin: PF3
#helper:RunoutDebounceHelper

#[filament_switch_sensor material_2]
#switch_pin: PF4

#[filament_switch_sensor material_2]
#switch_pin: PF10


#[filament_switch_sensor material_3]
#switch_pin: PC0

[printer]
kinematics: delta
max_velocity: 1000 #max print speed ,default is 400mm/s
max_accel: 20000 
#max_accel_to_decel: 8000
square_corner_velocity: 5 
max_z_velocity: 1000
delta_radius: 171.2 # delta radius,default is 171.2
print_radius: 133 #max printable radius
minimum_z_position:-5 # min z position nozzle won't go to the position which Z lower the vaule
#x_size_offset: 0   #adjust X size accuracy
#y_size_offset: 0   #adjust Y size accuracy

################################################################################################################
#calibrate and bed_mesh
################################################################################################################
[delta_calibrate]
radius: 110
horizontal_move_z: 10 #This value is related to the lift height of the nozzle during delta_calibrate
Speed: 100

[probe]
pin: ^PG1
#control_pin: PE9
x_offset: 0 
y_offset: 0 
z_offset: -0.24 #the distance between nozzle and level switch
speed: 10
samples: 2 #probe one point three times get an average
samples_result: average
sample_retract_dist: 5
samples_tolerance: 0.05 # precision
samples_tolerance_retries: 5 

#[bltouch]
#sensor_pin: ^PG1
#control_pin: PE9

[neopixel my_neopixel_1]
pin: PF12

[neopixel my_neopixel_2]
pin: PF11

#[hall_filament_width_sensor]
#adc1: PC2
#adc2: PC3

[adxl345]
cs_pin: PE10
spi_bus: spi4

#[servo servo_motor]
#pin: PE7

#i2c_bus:i2c2_PB10_PB11

[output_pin relay_pin]
pin: PD10
pwm: False
value: 0

[virtual_sdcard]
path: ~/gcodes
on_error_gcode:
    M106 S0
    TURN_OFF_HEATERS
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    boxfan_off

[save_variables]
filename: ~/savedVariables1.cfg

[gcode_arcs]

[display_status]

[resonance_tester]
probe_points:0, 0, 20
accel_chip: adxl345
min_freq: 30
max_freq: 50
accel_per_hz: 250

[bed_mesh]
speed: 50
horizontal_move_z: 7 #This value is related to the lift height of the nozzle during bed_mesh
mesh_radius: 115
mesh_origin: 0,0
round_probe_count: 7 # 7*7
algorithm: bicubic
fade_start: 0.2
fade_end: 2
fade_target: 0

#############################################################################################################
#GCODE
#############################################################################################################
[gcode_macro relay_on]
gcode:
    SET_PIN PIN=relay_pin VALUE=1

[gcode_macro relay_off]
gcode:
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    SET_PIN PIN=relay_pin VALUE=0

[gcode_macro ZUP]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.025 MOVE=1

[gcode_macro ZDOWN]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=1

[gcode_macro boxfan_on]
gcode:
    SET_PIN PIN=BOXFAN_pin VALUE=1

[gcode_macro boxfan_off]
gcode:
    SET_PIN PIN=BOXFAN_pin VALUE=0

[gcode_macro MEASURING_RESONANCES] #检测共振
description: Measuring Resonances
gcode: 
     M117 MEASURING RESONANCES START !
     G28
     SAVE_VARIABLE VARIABLE=resonances_state VALUE=True
     SHAPER_CALIBRATE
     G28
     SAVE_CONFIG

[gcode_macro bed_level_1]
gcode:
    SET_GCODE_OFFSET Z=0
    M117 BED LEVEL START !
    G28
    M204 S200
    M104 S140
    M140 S60
    M109 S140
    M190 S60
    delta_calibrate
    G1 X0 Y0 Z50 F4200
    M104 S0
    M140 S0
    G28
    F104 K=level_state V=True
    save_config

[gcode_macro bed_level_2]
gcode:
    G28
    M204 S200
    M104 S140
    M140 S60
    M109 S140
    M190 S60
    G1 X0 Y0 Z50 F4200
    bed_mesh_calibrate
    G1 X0 Y0 Z50 F4200
    M104 S0
    M140 S0
    G28
    F104 K=level2_state V=True
    save_config

[gcode_macro UNLOAD_FILAMENT] #unload filament
gcode:
    {% set speed_factor = printer.gcode_move.speed_factor|float %}
    {% set extrude_factor = printer.gcode_move.extrude_factor|float %}
    M117 unload_filament heating completed!
    G91
    M220 S100   # set speed_factor to normal
    M221 S100   # set extrude_factor to normal
    G1 E10 F300
    G1 E-100 F800
    # G1 E-100 F200
    M400
    M220 S{speed_factor*100} # recover speed_factor
    M221 S{extrude_factor*100} # recover extrude_factor
    G90
    M117 unload_filament done!

[gcode_macro LOAD_FILAMENT] #load filament
gcode:
    {% set speed_factor = printer.gcode_move.speed_factor|float %}
    {% set extrude_factor = printer.gcode_move.extrude_factor|float %}

    M117 load_filament heating completed!
    G91
    M220 S100    # set speed_factor to normal
    M221 S100    # set extrude_factor to normal
    G1 E70 F800
    G1 E30 F300
    M400
    M220 S{speed_factor*100}  # recover speed_factor
    M221 S{extrude_factor*100}  # recover extrude_factor
    G90
    M117 load_filament done!

[gcode_macro M600]
gcode:
    PAUSE

[gcode_macro TMC]
gcode:
    DUMP_TMC STEPPER=stepper_a
    DUMP_TMC STEPPER=stepper_b
    DUMP_TMC STEPPER=stepper_c
    DUMP_TMC STEPPER=extruder

[gcode_macro save_time]
gcode:
    {% if printer.save_variables.variables.total_time %}
        {% set print_time = printer.save_variables.variables.total_time %}
    {% else %} 
        {% set print_time = 0 %}
    {% endif %}
    {% set print_time = print_time + printer.print_stats.print_duration/3600 %}
    SAVE_VARIABLE VARIABLE=total_time VALUE={print_time}

[gcode_macro SET_GCODE_OFFSET]
rename_existing: _SET_GCODE_OFFSET
gcode:
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}
    {% else %} 
        {% set offsets = {'x': None,'y': None,'z': None} %}
    {% endif %}
    
    {% set ns = namespace(offsets={'x': offsets.x,'y': offsets.y,'z': offsets.z}) %}
    
    _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}

    {%if 'X' in params %}{% set null = ns.offsets.update({'x': params.X}) %}{% endif %}
    {%if 'Y' in params %}{% set null = ns.offsets.update({'y': params.Y}) %}{% endif %}
    {%if 'Z' in params %}{% set null = ns.offsets.update({'z': params.Z}) %}{% endif %}
    {%if 'Z_ADJUST' in params %}
        {%if ns.offsets.z == None %}{% set null = ns.offsets.update({'z': 0}) %}{% endif %}
        {% set null = ns.offsets.update({'z': (ns.offsets.z | float) + (params.Z_ADJUST | float)}) %}
    {% endif %}
    SAVE_VARIABLE VARIABLE=gcode_offsets VALUE="{ns.offsets}"

[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 2
gcode:
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}

        _SET_GCODE_OFFSET {% for axis, offset in offsets.items() if offsets[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}

        { action_respond_info("Loaded gcode offsets from saved variables [%s]" % (offsets)) }
    {% endif %}|
    {% if printer.save_temp_variables.variables.level_state %}
        F104 K=level_state V=False
        M117 BedLevel1 Done
        bed_level_2
    {% endif %}|
    {% if printer.save_temp_variables.variables.level2_state %}
        F104 K=level2_state V=False
        M117 BedLevel Done
    {% endif %}|
    {% if printer.save_variables.variables.resonances_state %}
        SAVE_VARIABLE VARIABLE=resonances_state VALUE=False
        G28
        M117 Vibration Compensation Done
    {% endif %}
    SAVE_VARIABLE VARIABLE=plr_flag VALUE=False

[delayed_gcode LOAD_FUNCTION_SWITCH_DELAY]
initial_duration: 0.2
gcode:  
    LOAD_FUNCTION_SWITCH

[idle_timeout]
gcode:
#     A list of G-Code commands to execute on an idle timeout. See
#     docs/Command_Templates.md for G-Code format. The default is to run
#     "TURN_OFF_HEATERS" and "M84".
timeout: 172800
#     Idle time (in seconds) to wait before running the above G-Code
#     commands. The default is 600 seconds.

####################################################################################################################################
#PAUSE ,RESUME ,CANCEL_PRINT
####################################################################################################################################
[pause_resume]

[gcode_macro PAUSE] 
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    ##### set defaults #####
    {% if printer.print_stats.state == "printing" %}
        {% set x = params.X|default(0) %}      #edit to your park position
        {% set y = params.Y|default(-110) %}      #edit to your park position
        {% set z = params.Z|default(10)|float %} #edit to your park position
        {% set e = params.E|default(1) %}        #edit to your retract length

        ##### calculate save lift position #####
        {% set max_z = printer.toolhead.axis_maximum.z|float %}
        {% set homed_z = printer.gcode_move.homing_origin[2]|float %}
        {% set limit_z = (max_z - homed_z)|round(4,'floor') %}
        {% set act_z = printer.toolhead.position.z|float %}
        {% set lift_z = z|abs %}

        ### If the current position is greater than max_z-60, xy is set to 0###
        ### Normally, the max_z-limit_z is around 46mm,now expand 50mm###
        {% if act_z >= limit_z - 60 %}
            {% set x = 0 %}
            {% set y = 0 %}
            {% set toohigh = true %}
        {% else %}
            {% set toohigh = false %}
        {% endif %}

        {% if act_z < (limit_z - lift_z) %}
            {% set z_safe = act_z + lift_z %}
        {% else %}
            {% set z_safe = limit_z %}
        {% endif %}

        {% set fan_speed = printer.fan.speed|float %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=fan_speed VALUE={fan_speed}
        ##### end of definitions #####
        PAUSE_BASE
        G91
        {% if printer.extruder.can_extrude|lower == 'true' %}
            G1 E-{e} F2100
        {% else %}
            {action_respond_info("Extruder not hot enough")}
        {% endif %}
        {% if "xyz" in printer.toolhead.homed_axes %}
            G90
            {% if toohigh == true %}
                G1 X{x} Y{y} Z{z_safe} F6000
                M117 Current position is too high,pause and move to X={ x } Y={ y } Z={ z_safe }
            {% else %}
                # Move the Z-axis to a safe height to avoid collision with the bed or other objects 
                G1 z{z_safe} F6000
                # Move the X and Y axes to the specified position
                G1 X{x} Y{y} F6000
                # clear bed_mesh Z fade height
                G1 X{x} Y{y} F6000
                M117 Pause and move to X={ x } Y={ y } Z={ z_safe }
            {% endif %}
        {% else %}
            {action_respond_info("Printer not homed")}
        {% endif %}
        {% set nozzle_temp = printer.extruder.target|float %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=nozzle_temp VALUE={nozzle_temp}
        M104 S90
        {% set bed_temp = printer.heater_bed.target|float %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=bed_temp VALUE={bed_temp}
        M106 S204
        F108
        M400
    {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_fan_speed: 0
variable_nozzle_temp: 0
variable_bed_temp: 0
gcode:
    ##### set defaults #####
    {% if printer.print_stats.state == "paused" %}
        M140 S{bed_temp}
        M109 S{nozzle_temp}
        {% set e = params.E|default(1) %} #edit to your retract length
        #### get VELOCITY parameter if specified ####
        {% if 'VELOCITY' in params|upper %}
            {% set get_params = ('VELOCITY=' + params.VELOCITY) %}
        {%else %}
            {% set get_params = "" %}
        {% endif %}
        ##### end of definitions #####
        G91
        {% if nozzle_temp >= 180 %}
            G1 E{e} F2100
        {% else %}
            {action_respond_info("Extruder not hot enough")}
        {% endif %}
        G90
        M400
        RESUME_BASE {get_params}
        {% set fan_speed = fan_speed * 255 %}
        M106 S{fan_speed}
    {% endif %}

[force_move]
enable_force_move: True

[gcode_macro RESTORE_E_CURRENT]
gcode:
    SET_TMC_CURRENT STEPPER=extruder CURRENT=1.2
##############################################################################################
##############################################################################################
[gcode_macro START_PRINT]
gcode:
    relay_on
    {% set sd_filename = printer.virtual_sdcard.file_path|string %}
    SAVE_VARIABLE VARIABLE=sd_filename VALUE='"{sd_filename}"'
    SAVE_VARIABLE VARIABLE=was_interrupted VALUE=True
    SAVE_VARIABLE VARIABLE=file_position VALUE=0
    SAVE_VARIABLE VARIABLE=x_pos VALUE=0.0
    SAVE_VARIABLE VARIABLE=y_pos VALUE=0.0
    SAVE_VARIABLE VARIABLE=z_pos VALUE=0.0
    SAVE_VARIABLE VARIABLE=e_pos VALUE=0.0
    SET_TMC_CURRENT STEPPER=extruder CURRENT=0.8
    UPDATE_DELAYED_GCODE ID=heatsink DURATION=0
    CLEAR_PAUSE
    M105 S1
    M106 S255
    boxfan_on

[gcode_macro END_PRINT]
gcode:
    SAVE_VARIABLE VARIABLE=was_interrupted VALUE=False
    boxfan_off
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    M106 S255
    UPDATE_DELAYED_GCODE ID=heatsink DURATION=100

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    SAVE_VARIABLE VARIABLE=was_interrupted VALUE=False
    F100
    M106 S0
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE
    M105 S1
    G28
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    boxfan_off
    M106 S255
    UPDATE_DELAYED_GCODE ID=heatsink DURATION=100

[delayed_gcode heatsink]
initial_duration: 0 #if initial_duration is zero, the delayed gcode won't start by default
gcode:
    M106 S0
    UPDATE_DELAYED_GCODE ID=heatsink DURATION=0
###########################################################################################################################
###########################################################################################################################

########################################
# TMC2160 configuration
########################################

#[tmc5160 stepper_x]
#cs_pin: PD6
#spi_software_sclk_pin: PC6
#spi_software_mosi_pin: PC8
#spi_software_miso_pin: PC7
##diag1_pin: PC15
#run_current: 0.800
#sense_resistor: 0.022
#stealthchop_threshold: 999999

#[tmc5160 stepper_y]
#cs_pin: PD5
#spi_software_sclk_pin: PC6
#spi_software_mosi_pin: PC8
#spi_software_miso_pin: PC7
##diag1_pin: PF0
#run_current: 0.800
#sense_resistor: 0.022
#stealthchop_threshold: 999999

#[tmc5160 stepper_z]
#cs_pin: PD4
#spi_software_sclk_pin: PC6
#spi_software_mosi_pin: PC8
#spi_software_miso_pin: PC7
##diag1_pin: PF1
#run_current: 0.650
#sense_resistor: 0.022
#stealthchop_threshold: 999999

#[tmc5160 stepper_]
#cs_pin: PD3
#spi_software_sclk_pin: PC6
#spi_software_mosi_pin: PC8
#spi_software_miso_pin: PC7
##diag1_pin: PF2
#run_current: 0.800
#sense_resistor: 0.022
#stealthchop_threshold: 999999

#[tmc5160 extruder]
#cs_pin: PD2
#spi_software_sclk_pin: PC6
#spi_software_mosi_pin: PC8
#spi_software_miso_pin: PC7
#run_current: 0.800
#sense_resistor: 0.075
#stealthchop_threshold: 999999

#[tmc5160 extruder1]
#cs_pin: PA15
#spi_software_sclk_pin: PC6
#spi_software_mosi_pin: PC8
#spi_software_miso_pin: PC7
#run_current: 0.800
#sense_resistor: 0.075
#stealthchop_threshold: 999999

#[tmc5160 extruder2]
#cs_pin: PA9
#spi_software_sclk_pin: PC6
#spi_software_mosi_pin: PC8
#spi_software_miso_pin: PC7
#run_current: 0.800
#sense_resistor: 0.075
#stealthchop_threshold: 999999

#[tmc5160 extruder3]
#cs_pin: PA10
#spi_software_sclk_pin: PC6
#spi_software_mosi_pin: PC8
#spi_software_miso_pin: PC7
#run_current: 0.800
#sense_resistor: 0.075
#stealthchop_threshold: 999999

[board_pins]
aliases:
    # FPC header, Aliases EXP1 & EXP2 for mini12864
    EXP1_1=PG5, EXP1_2=PG4,
    EXP1_3=PG3, EXP1_4=PG2,
    EXP1_5=PD15, EXP1_6=PD14,
    EXP1_7=PD13, EXP1_8=PD12,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PE13, EXP2_2=PE12,
    EXP2_3=PG8, EXP2_4=PE11,
    EXP2_5=PG7, EXP2_6=PE14,
    EXP2_7=PG6, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<NC>
    
# See the sample-lcd.cfg file for definitions of common LCD displays.

# A [probe] section can be defined instead with a pin: setting identical
# to the sensor_pin: for a bltouch
